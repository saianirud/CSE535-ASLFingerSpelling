# -*- coding: utf-8 -*-
"""asl-image-classification-with-cnns-1-0-tes-2e676e.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OsxPAb7mgljIsnEDBU7Ethx6v2TxOGnY

# Import the required libraries
"""

import pandas as pd
import numpy as np
import tensorflow as tf

"""# Preprocessing the image data"""

#taking the train validation ratio as 4:1

batch_size=32
img_height=256
img_width=256


train_ds = tf.keras.utils.image_dataset_from_directory(
  "./asl-alphabet/asl_alphabet_train/",
  validation_split=0.2,
  subset="training",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

test_ds = tf.keras.utils.image_dataset_from_directory(
  "./asl-alphabet/asl_alphabet_train/",
  validation_split=0.2,
  subset="validation",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

class_names = train_ds.class_names
print("Class names:",class_names)
print("Total classes:",len(class_names))

#random samples of images from the train data

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
  for i in range(29):
    ax = plt.subplot(6,5 , i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

"""# Modelling and training"""

#modelling

from tensorflow.keras import Sequential
from tensorflow.keras import layers

model = Sequential([
  layers.Rescaling(1./255, input_shape=(img_height, img_width, 3)),
  layers.Conv2D(16, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(32, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(64, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Flatten(),
  layers.Dense(128, activation='relu'),
  layers.Dense(26,activation='softmax')
])

model.summary()

model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.fit(train_ds, batch_size=32,validation_batch_size=32, validation_data=test_ds,epochs=3)

model.save('cnn.h5')

